security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    password_hashers:
        # Pour notre class User
        App\Entity\User:
            # On utilise le meilleur algo présent sur la machine
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            # Nos users sont de type Entité Doctrine
            entity:
                # Dont la class est celle-ci
                class: App\Entity\User
                # La propriété "de connexion/d'affichage"
                property: email
    firewalls:

        # Règles pour le login de LexikJWT
        login:
            # URL de login
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        # Règles où le JWT doit s'appliquer
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            # Les utilisateurs sont dans ce provider
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

        ###
        ### Routes API
        ###

        # Exemple de la doc LexikJWT, indique que :
        # 1. On ouvre le login aux anonymes
        # 2. On autorise l'accès à toute l'API aux utilisateurs connectés

        # - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

        - { path: ^/api/movies, roles: ROLE_ADMIN, methods: POST }

        # Front : Si user ANONYME : page d'accueil + fiche film seulement.
        # => rien à configurer, c'est l'accès par défaut

        ###
        ### Routes de l'appli Web classique
        ###

        # Front : Si ROLE_USER : ajouter une critique sur un film.
        - { path: ^/movie/\d+/add/review, roles: ROLE_USER }
        # équivaut à - { path: ^/movie/[0-9]+/add/review, roles: ROLE_USER }

        # Admin : Si ROLE_MANAGER : accès aux pages de listes movie, genres etc. et pages show (si existantes).
        - { path: ^/back/.+/(add|edit|delete), roles: ROLE_ADMIN }
        

        # Admin : Sécuriser toutes les routes /add /edit /delete avec ROLE_ADMIN.
        # ^ = commence par
        - { path: ^/back/(movie|job|user)/(browse|read), roles: ROLE_MANAGER }
        

    # https://symfony.com/doc/current/security.html#hierarchical-roles
    role_hierarchy:
        # ROLE_ADMIN hérite de ROLE_MANAGER
        ROLE_ADMIN: ROLE_MANAGER
        # Si on souhaite que les MANAGER et ADMIN se comportent comme un USER sur le front
        ROLE_MANAGER: ROLE_USER
        # C'est en cascade, donc ROLE_ADMIN => ROLE_USER aussi
